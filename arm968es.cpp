#include "arm968es.h"
#include <cstring>
#include <stdio.h>

namespace Emulator::Arm

{

enum ConditionCode : uint8_t {
  EQ = 0b0000,
  NE = 0b0001,
  CS = 0b0010,
  CC = 0b0011,
  MI = 0b0100,
  PL = 0b0101,
  VS = 0b0110,
  VC = 0b0111,
  HI = 0b1000,
  LS = 0b1001,
  GE = 0b1010,
  LT = 0b1011,
  GT = 0b1100,
  LE = 0b1101,
  AL = 0b1110,
};

// clang-format off
enum InstrMask : uint32_t {
  ADC = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  ADD = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  AND = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  B   = 0b0000'1110'0000'0000'0000'0000'0000'0000,
  BIC = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  BL  = 0b0000'1110'0000'0000'0000'0000'0000'0000,
  BX  = 0b0000'1111'1111'1111'1111'1111'1111'0000,
  CDP,
  CMN = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  CMP = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  EOR = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  LDC,
  LDM,
  LDR = 0b0000'1100'0001'0000'0000'0000'0000'0000,
  MCR,
  MLA = 0b0000'1111'0110'0000'0000'0000'1111'0000,
  MOV = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  MRC,
  MRS,
  MSR,
  MUL = 0b0000'1111'0110'0000'0000'0000'1111'0000,
  MVN = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  ORR = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  RSB = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  RSC = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  SBC = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  STC,
  STM,
  STR = 0b0000'1100'0001'0000'0000'0000'0000'0000,
  SUB = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  SWI,
  SWP,
  TEQ = 0b0000'1101'1110'0000'0000'0000'0000'0000,
  TST = 0b0000'1101'1110'0000'0000'0000'0000'0000,
};
// clang-format on

// clang-format off
enum Instr : uint32_t {
  ADC = 0b0000'0000'1010'0000'0000'0000'0000'0000,
  ADD = 0b0000'0000'1000'0000'0000'0000'0000'0000,
  AND = 0b0000'0000'0000'0000'0000'0000'0000'0000,
  B   = 0b0000'1010'0000'0000'0000'0000'0000'0000,
  BIC = 0b0000'0001'1100'0000'0000'0000'0000'0000,
  BL  = 0b0000'1011'0000'0000'0000'0000'0000'0000,
  BX  = 0b0000'0001'0010'1111'1111'1111'0001'0000,
  CDP,
  CMN = 0b0000'0001'0110'0000'0000'0000'0000'0000,
  CMP = 0b0000'0001'0100'0000'0000'0000'0000'0000,
  EOR = 0b0000'0000'0010'0000'0000'0000'0000'0000,
  LDC,
  LDM,
  LDR = 0b0000'0100'0001'0000'0000'0000'0000'0000,
  MCR,
  MLA = 0b0000'0000'0010'0000'0000'0000'1001'0000,
  MOV = 0b0000'0001'1010'0000'0000'0000'0000'0000,
  MRC,
  MRS,
  MSR,
  MUL = 0b0000'0000'0000'0000'0000'0000'1001'0000,
  MVN = 0b0000'0001'1110'0000'0000'0000'0000'0000,
  ORR = 0b0000'0001'1000'0000'0000'0000'0000'0000,
  RSB = 0b0000'0000'0110'0000'0000'0000'0000'0000,
  RSC = 0b0000'0000'1110'0000'0000'0000'0000'0000,
  SBC = 0b0000'0000'1100'0000'0000'0000'0000'0000,
  STC,
  STM,
  STR = 0b0000'0100'0000'0000'0000'0000'0000'0000,
  SUB = 0b0000'0000'0100'0000'0000'0000'0000'0000,
  SWI,
  SWP,
  TEQ = 0b0000'0001'0010'0000'0000'0000'0000'0000,
  TST = 0b0000'0001'0000'0000'0000'0000'0000'0000,
};
// clang-format on

ConditionCode process_condition(uint32_t instr) {
  return ConditionCode(instr >> 28);
}

[[nodiscard]] bool CPU::dispatch(const GameCard::GameCard &game_card) noexcept {

  uint32_t instr;
  memcpy(&instr, (void *)&game_card.mem[pc], kInstrSize);

  printf("0x%08X,", instr);

  printf("%i", process_condition(instr));

  pc += kInstrSize;
  return true;
}

} // namespace Emulator::Arm
